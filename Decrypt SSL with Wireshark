https://www.comparitech.com/net-admin/decrypt-ssl-with-wireshark/
works w\ Perfect Forward Encryption (PFE) through Diffie-Hellman or comparable key exchanges.

Wireshark (when setup) can decrypt SSL and allow you to view raw data 

Differences between the terms “pre-master secret”, “master secret”, “private key”, and “shared secret”?
https://crypto.stackexchange.com/questions/27131/differences-between-the-terms-pre-master-secret-master-secret-private-key

Using Pre-Master secret to decrypt SSL
    Pre-master secret key is generated by the client and used by the server to derive a master key that encrypts the session traffic. It’s the current standard in 
    cryptography and is usually implemented via Diffie-Hellman.

    Diffie Hellman approach generates a public and private key on both sides of the transaction, but only shares the public key. Unlike Diffie-Hellman, the RSA algorithm
    can be used for signing digital signatures as well as symmetric key exchange, but it does require the exchange of a public key beforehand.
     https://www.venafi.com/blog/how-diffie-hellman-key-exchange-different-rsa#:~:text=In%20a%20nutshell%2C%20Diffie%20Hellman,of%20a%20public%20key%20beforehand.

Your browser can be made to log the Pre-Master Secret Key (which wireshark will use to decrypt SSL\TLS sessions)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
How to decrypt SSL\TLS w\ Pre-Master Secret Key:
  [1]- Set an "Environment Variable"
  [2]- Launch your browser
  [3]- Configure wireshark
  [4]- Capture & Decrypt session keys
when completed, you'll be able to decrypt SSL\TLS sessions w\ Wireshark w\ out needing access to the target server
[1]
In 'Windows' set Env Var named 'SSLKEYLOGFILE'
    Right-click 'My Computer' -> select 'Properties' -> click 'Advanced System Settings' -> click 'Environmental Variables' -> click 'New...' -> ENTER in: Var Name:
    'SSLKEYLOGFILE' Var Value: 'C:\Users\{usrProfile}\Documents\Wireshark\ssl-keys.log' => click 'Browse File..' -> & specify the path using the file picker

    NOTE: IF creating a system wide env var.  use wildcards 'for relative paths' /or/ store the file accessible by all users (ie. %USERPROFILES%\App Data\ssl-keys.log
    \or\ C:\ssl-keys.log)

In 'Linux' in Terminal | in Linux the var is stored in ~/.bashrc | on Mac we'll create the var in the file ~/.MacOSX/environment
    *Nix - open Terminal type "type this"
        "nano ~/.bashrc" -> At the end of the file, add this line: "export SSLKEYLOGFILE=~/.ssl-key.log" -> Press Ctrl+X -> Press 'Y' -> OPEN a NEW TERMINAL type 
        "echo $SSLKEYLOGFILE"  
    Mac open Terminal 
    "nano ~/.bash_profile" -> At the end of the file, add this line: "export SSLKEYLOGFILE=~/.ssl-key.log" -> Press Ctrl+X -> Press 'Y' -> OPEN a NEW TERMINAL type 
    "echo $SSLKEYLOGFILE"
    NOTE: Write down the echo output (this is your Full Path to SSL Pre-Master Key Log) i.e. /Users/../.ssl-keys.log

[2]
Launch Browser & confirm that log file is being used! -> to populate the log, navigate to a webpage using SSL -> now check the file for DATA 
    In Windows = use notepad, atom, etc...
    In Linux or Mac Open Terminal and type "cat ~/.ssl-log.key"
    *After confirming your browser is logging Pre-Master Keys
    
[3]
Configure Wireshark
    Open WireShark -> click 'Edit' -> click 'Preferences' -> Left-Side of pane Expand 'Protocols' -> scroll and click 'SSL' -> Under '(Pre)-Master-Secret log filenam' 
    click 'Browse...'-> browse to the log file \or\ copy and paste the log file name and path
    
[4] 
Capture the session & Decrypt SSL
  Start an unfiltered capture session -> minimize it -> open browser - > visit secure site to generate data (can set 'display filter' to 'SSL' to minimize session noise) -> 
  click on any frame containing encrypted data
  In Wireshark - select an encrypted data frame, look at 'PACKET BYTE VIEW' and specifically the tabs underneath the view. you should see an entry for 'DECRYPTED SSL' data, 
  among others You’ll notice that my session still looks like it’s full of garbage, and no HTML is visible. That’s because my web server (and most Apache servers) use GZIP
  compression by default. When you click the Uncompressed entity body tab, which only shows up in this case with SSL decryption enabled, you can view the source code of the site
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
***  Using an RSA key to decrypt SSL (in wireshark there is a field to upload RSA keys to decrypt NOTE: In practice, RSA key decryption is deprecated.)

The reason decrypting SSL with an RSA key isn’t commonly used anymore is that Perfect Forward Encryption (PFE) has made it obsolete. Sessions negotiated with Diffie-Hellman
don’t use the RSA key directly; instead they generate a one-time key, stored only in RAM, that is encrypted using the key on disk.

If you were previously using an RSA key to decode traffic, and it stopped working, you can confirm that the target machine is using Diffie-Hellman exchanges by enabling SSL
logging.

SSL Debug

To turn on logging, click Edit from the toolbar menu and select Preferences. Expand the Protocols menu item on the left and scroll down to SSL. From here, you can click the 
Browse button and set the location of your SSL log.

Once the location is set, all SSL interactions will be logged in the specified file.

Cipher file

Capture a session with your SSL-enabled host, then check the logs. Specifically, you should scroll until you find the frame that the TLS handshake was negotiated on. 
It’s likely that you’ll see a telltale DHE entry in the cipher string.

That means Diffie-Hellman key exchanges are enabled. In my case, Apache is specifically using Diffie-Hellman with elliptic-curve keys, which is denoted by the string ECDHE.
scroll a little further and you’re likely to see that the master secret cannot be found.

Debug file

If your logs look like that, and you can’t decrypt data using an RSA key, you have no choice but to switch over to the pre-master secret method above.

Since PFE is becoming standard practice, with TLSv1.3 likely forcing the issue, simple RSA key decryption is deprecated and should not be used.

Wireshark makes decrypting SSL traffic easy
I really like the way Wireshark handles the SSL decryption process. Cryptography is complicated, and the standards are constantly changing to be more secure. But once 
Wireshark and your environment are set up properly, all you have to do is change tabs to view decrypted data. It doesn’t get any easier than that.

Related: Fix Common WireShark Startup ” no interfaces found” Issue

Wireshark Decrypt SSL FAQs
How do I read TLS packets in Wireshark?
Follow these steps to read TLS packets in Wireshark:

Start a packet capture session in Wireshark.
In the top menu bar, click on Edit, and then select Preferences from the drop-down menu.
In the Preferences window, expand the Protocols node in the left-hand menu tree.
Click on SSL. The main panel of the window will show protocol settings.
Enter a file name and select a location for SSL debug file.
Click in RSA keys list and then select Edit and then New.
Fill out the information fields in the pop-up window: IP address, Port, Protocol (which will be HTTPS), Key File, and Password. Press OK.
Click OK in the Preferences screen.
The data field at the bottom of the main Wireshark page will show the decrypted contents of the packet.

How does a 2 way SSL handshake work?
The two-way SSL handshake authenticates both the server and the client. Here are the steps that are carried out in this process:

Client hello: sent from the client to the server and includes its supported cipher suites and TLS version compatibilities.
Server hello: sent from the server to the client in response. It contains a link to the server’s public certificate and a request for the same back from the client.
The browser validates the server certificate and if all is OK, sends a link to its own certificate.
The server checks out the client’s certificate. If all is OK, session establishment continues.
Is it possible to decrypt passively sniffed SSL/TLS traffic?
Yes. However, you will always need the RSA key in order to decrypt traffic. That could be acquired through legitimate methods and with permission or could be tricked out of 
the source of the traffic through a “man in the middle” strategy.
    
